import { useTranslation } from "react-i18next";
import React, { useState, useRef, useEffect } from "react";
import {
  Stack,
  Text,
  Group,
  Button,
  Paper,
  TextInput,
  ActionIcon,
  Table,
  ScrollArea,
  Box,
  Card,
  Title,
  Switch,
  SimpleGrid,
  UnstyledButton,
  Center,
  Select,
  Modal,
  Alert,
  Tabs,
  useMantineTheme,
} from "@mantine/core";
import { useTheme } from "../../../providers/theme-provider";
import {
  IconPlus,
  IconTrash,
  IconEdit,
  IconAlertTriangle,
  IconCheck,
  IconX,
  IconArrowRight,
} from "@tabler/icons-react";
import { v4 as uuidv4 } from "uuid";
import {
  Stage,
  Layer,
  Line,
  Circle,
  Rect,
  Image as KonvaImage,
  Text as KonvaText,
  Transformer,
} from "react-konva";
import { useRecipeStore } from "../../../lib/store/recipe-store";
import type {
  Region,
  RegionPoint,
  FrameData,
  RoadType,
  RegionConnection,
} from "../../../types/recipe";
import type { KonvaEventObject } from "konva/lib/Node";
import type { Stage as KonvaStage } from "konva/lib/Stage";
import type { Line as KonvaLine } from "konva/lib/shapes/Line";
import type { Circle as KonvaCircle } from "konva/lib/shapes/Circle";
import type { Transformer as KonvaTransformer } from "konva/lib/shapes/Transformer";
import useImage from "use-image";
import { RoadTypeIcon } from "../../road-config/road-type-icon";

interface RoadTypeOption {
  value: RoadType;
  label: string;
}

export function RegionSetupStep() {
  const { t } = useTranslation(["recipes", "common"]);
  const { formValues, addRegion, updateRegion, deleteRegion } =
    useRecipeStore();
  const mantineTheme = useMantineTheme();
  const { theme, colorScheme } = useTheme();
  
  // Primary color from theme
  const PRIMARY_COLOR = mantineTheme.colors[mantineTheme.primaryColor][5];

  const [videoSize, setVideoSize] = useState({ width: 640, height: 450 });
  const [selectedRegion, setSelectedRegion] = useState<Region | null>(null);
  const [regionName, setRegionName] = useState("");
  const [roadType, setRoadType] = useState<RoadType>("straight");
  const [editingRegion, setEditingRegion] = useState<string | null>(null);
  const [isDrawing, setIsDrawing] = useState(false);
  const [currentPoints, setCurrentPoints] = useState<RegionPoint[]>([]);
  const [connections, setConnections] = useState<RegionConnection[]>([]);
  const [hoveredConnection, setHoveredConnection] = useState<string | null>(
    null
  );
  const [hoveredRegion, setHoveredRegion] = useState<string | null>(null);
  const [sourceRegionId, setSourceRegionId] = useState<string | null>(null);
  const [destinationRegionId, setDestinationRegionId] = useState<string | null>(
    null
  );

  // Mouse position for hover label
  const [mousePos, setMousePos] = useState({ x: 0, y: 0 });
  const [showHoverLabel, setShowHoverLabel] = useState(false);
  const [hoverLabelText, setHoverLabelText] = useState("");

  // Edit mode states
  const [isEditMode, setIsEditMode] = useState(false);
  const [editablePoints, setEditablePoints] = useState<RegionPoint[]>([]);
  const [selectedPointIndex, setSelectedPointIndex] = useState<number | null>(
    null
  );

  // Region dragging states
  const [isDraggingRegion, setIsDraggingRegion] = useState(false);
  const [dragStartPos, setDragStartPos] = useState({ x: 0, y: 0 });
  const [originalPoints, setOriginalPoints] = useState<RegionPoint[]>([]);

  // Road type change confirmation
  const [showRoadTypeModal, setShowRoadTypeModal] = useState(false);
  const [pendingRoadType, setPendingRoadType] = useState<RoadType | null>(null);

  // Region deletion confirmation
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [regionToDelete, setRegionToDelete] = useState<{
    id: string;
    name: string;
    connections: RegionConnection[];
  } | null>(null);

  const stageRef = useRef<KonvaStage>(null);
  const transformerRef = useRef<KonvaTransformer>(null);

  // Use theme colors instead of hardcoded values
  // These functions help us get colors from the theme
  const getThemeColor = (colorPath: string): string => {
    // Parse the color path (e.g., "blue.5" -> theme.colors.blue[5])
    const [colorName, index] = colorPath.split('.');
    
    // Special handling for theme's other properties
    if (colorName === 'ui') {
      return theme.other?.ui?.[index] || colorPath;
    }
    
    if (colorName === 'backgrounds') {
      return theme.other?.backgrounds?.[index] || colorPath;
    }
    
    if (colorName === 'regionColors') {
      const path = theme.other?.regionColors?.[index];
      if (path) {
        // If we have a nested path like "blue.5", recursively resolve it
        return getThemeColor(path);
      }
      return colorPath;
    }
    
    // Standard color from theme colors
    return theme.colors?.[colorName]?.[Number(index)] || colorPath;
  };
  
  // Use the extended color palette from theme for region variety
  const REGION_COLORS = theme.other?.regionPalette || [
    "red.5",    // Primary red
    "green.5",  // Primary green
    "yellow.7", // Dark yellow
    "indigo.5", // Primary indigo
  ];

  const getRegionColor = (regionId: string) => {
    // Use region ID to consistently assign the same color
    const regionIndex = regions.findIndex((r) => r.id === regionId);
    if (regionIndex === -1) {
      // For new regions being created, use the next available color
      const colorPath = REGION_COLORS[regions.length % REGION_COLORS.length];
      return getThemeColor(colorPath);
    }
    const colorPath = REGION_COLORS[regionIndex % REGION_COLORS.length];
    return getThemeColor(colorPath);
  };

  // Get extracted frame data if available
  const capturedFrame: FrameData | null = formValues.extractedFrame
    ? JSON.parse(formValues.extractedFrame)
    : null;

  // Load the captured frame image
  const [frameImage] = useImage(capturedFrame?.imageDataUrl || "");

  const regions = formValues.regions || [];

  // Road type options
  const roadTypeOptions: RoadTypeOption[] = [
    {
      value: "straight",
      label: t("recipes:roadType.straight", "Straight"),
    },
    {
      value: "tJunction",
      label: t("recipes:roadType.tJunction", "T-Junction"),
    },
    {
      value: "crossroads",
      label: t("recipes:roadType.crossroads", "Crossroads"),
    },
  ];

  // Helper function to move all points of a region
  const moveRegionPoints = (
    points: RegionPoint[],
    deltaX: number,
    deltaY: number
  ): RegionPoint[] => {
    return points.map((point) => ({
      x: point.x + deltaX,
      y: point.y + deltaY,
    }));
  };

  // Reset drawing when selected region changes
  useEffect(() => {
    setIsDrawing(false);
    setCurrentPoints([]);
    setSelectedPointIndex(null);
  }, [selectedRegion]);

  // Force re-render when theme changes
  useEffect(() => {
    // Force a redraw of the canvas when theme changes
    const stage = stageRef.current;
    if (stage) {
      stage.draw();
      
      // Also update background and border colors of stage container
      const container = stage.container();
      if (container) {
        container.style.backgroundColor = colorScheme === 'dark' ? getThemeColor("gray.9") : getThemeColor("gray.0");
        container.style.borderColor = colorScheme === 'dark' ? getThemeColor("gray.7") : getThemeColor("gray.2");
      }
    }
    
    // Trigger state update to force re-render of all components
    setVideoSize({...videoSize});
  }, [colorScheme]);

  const handleRoadTypeChange = (newRoadType: RoadType) => {
    if (regions.length > 0 || connections.length > 0) {
      setPendingRoadType(newRoadType);
      setShowRoadTypeModal(true);
    } else {
      setRoadType(newRoadType);
    }
  };

  const confirmRoadTypeChange = () => {
    if (pendingRoadType) {
      setRoadType(pendingRoadType);
      regions.forEach((region) => deleteRegion(region.id));
      setConnections([]);
      setIsDrawing(false);
      setCurrentPoints([]);
      setEditingRegion(null);
      setSelectedRegion(null);
      setSourceRegionId(null);
      setDestinationRegionId(null);
      setIsEditMode(false);
    }
    setShowRoadTypeModal(false);
    setPendingRoadType(null);
  };

  const cancelRoadTypeChange = () => {
    setShowRoadTypeModal(false);
    setPendingRoadType(null);
  };

  const handleStageMouseMove = (e: KonvaEventObject<MouseEvent>) => {
    const stage = stageRef.current;
    if (!stage) return;

    const pointer = stage.getPointerPosition();
    if (pointer) {
      setMousePos({ x: pointer.x, y: pointer.y });
    }
  };

  const handleStageClick = (e: KonvaEventObject<MouseEvent>) => {
    // If we're dragging, don't add points
    if (isDraggingRegion) return;

    // If we're in edit mode, don't add new points
    if (isEditMode) return;

    if (!isDrawing) return;

    const stage = stageRef.current;
    if (!stage) return;
    const point = stage.getPointerPosition();

    if (point) {
      setCurrentPoints([...currentPoints, { x: point.x, y: point.y }]);
    }
  };

  const handleAddRegion = () => {
    setSelectedRegion(null);
    setEditingRegion(null);
    setIsDrawing(true);
    setCurrentPoints([]);
    setIsEditMode(false);
  };

  const handleSaveRegion = () => {
    if (currentPoints.length < 3) {
      return;
    }

    if (editingRegion) {
      const updatedRegion: Region = {
        id: editingRegion,
        name: regionName || `Region ${regions.length + 1}`,
        points: currentPoints,
        roadType: roadType,
      };
      updateRegion(updatedRegion);
    } else {
      const newRegion: Region = {
        id: uuidv4(),
        name: regionName || `Region ${regions.length + 1}`,
        points: currentPoints,
        roadType: roadType,
      };
      addRegion(newRegion);
    }

    setIsDrawing(false);
    setCurrentPoints([]);
    setRegionName("");
    setEditingRegion(null);
    setSelectedRegion(null);
  };

  const handleEditRegion = (region: Region) => {
    console.log("Starting edit for region:", region.name);

    // Clear conflicting states first
    setIsDrawing(false);
    setCurrentPoints([]);
    setSelectedPointIndex(null);
    setIsDraggingRegion(false);

    // Set edit states immediately
    setIsEditMode(true);
    setEditingRegion(region.id);
    setSelectedRegion(region);
    setRegionName(region.name);
    setEditablePoints([...region.points]);

    console.log("Edit mode should be active now");
  };

  const handleSaveEdit = () => {
    if (editingRegion && editablePoints.length >= 3) {
      const updatedRegion: Region = {
        id: editingRegion,
        name: regionName || `Region ${regions.length + 1}`,
        points: editablePoints,
        roadType: roadType,
      };
      updateRegion(updatedRegion);

      setIsEditMode(false);
      setEditingRegion(null);
      setSelectedRegion(null);
      setEditablePoints([]);
      setRegionName("");
      setIsDraggingRegion(false);
      setDragStartPos({ x: 0, y: 0 });
      setOriginalPoints([]);
    }
  };

  const handleCancelEdit = () => {
    setIsEditMode(false);
    setEditingRegion(null);
    setSelectedRegion(null);
    setEditablePoints([]);
    setIsDrawing(false);
    setCurrentPoints([]);
    setRegionName("");
    setIsDraggingRegion(false);
    setDragStartPos({ x: 0, y: 0 });
    setOriginalPoints([]);
  };

  const handleDeleteRegion = (regionId: string) => {
    // Check if region has connections
    const regionConnections = connections.filter(
      (conn) => conn.sourceId === regionId || conn.destinationId === regionId
    );

    if (regionConnections.length > 0) {
      // Show confirmation modal for regions with connections
      const regionName =
        regions.find((r) => r.id === regionId)?.name || "Unknown Region";
      setRegionToDelete({
        id: regionId,
        name: regionName,
        connections: regionConnections,
      });
      setShowDeleteModal(true);
    } else {
      // Safe to delete immediately
      performRegionDeletion(regionId);
    }
  };

  const performRegionDeletion = (regionId: string) => {
    deleteRegion(regionId);

    // Remove any connections involving this region
    setConnections((prev) =>
      prev.filter(
        (conn) => conn.sourceId !== regionId && conn.destinationId !== regionId
      )
    );

    if (editingRegion === regionId) {
      handleCancelEdit();
    }
  };

  const confirmDeleteRegion = () => {
    if (regionToDelete) {
      performRegionDeletion(regionToDelete.id);
      setShowDeleteModal(false);
      setRegionToDelete(null);
    }
  };

  const cancelDeleteRegion = () => {
    setShowDeleteModal(false);
    setRegionToDelete(null);
  };

  const handlePointDrag = (
    pointIndex: number,
    newPos: { x: number; y: number }
  ) => {
    const newPoints = [...editablePoints];
    newPoints[pointIndex] = newPos;
    setEditablePoints(newPoints);
  };

  // Region drag handlers - completely rewritten
  const handleRegionMouseDown = (e: KonvaEventObject<MouseEvent>) => {
    const stage = stageRef.current;
    if (!stage) return;

    const pointer = stage.getPointerPosition();
    if (!pointer) return;

    setIsDraggingRegion(true);
    setDragStartPos({ x: pointer.x, y: pointer.y });
    setOriginalPoints([...editablePoints]);

    // Change cursor immediately
    stage.container().style.cursor = "grabbing";
  };

  const handleStageMouseMoveForDrag = (e: KonvaEventObject<MouseEvent>) => {
    // Handle normal mouse move for hover labels
    handleStageMouseMove(e);

    // Handle region dragging
    if (!isDraggingRegion) return;

    const stage = stageRef.current;
    if (!stage) return;

    const pointer = stage.getPointerPosition();
    if (!pointer) return;

    const deltaX = pointer.x - dragStartPos.x;
    const deltaY = pointer.y - dragStartPos.y;

    const newPoints = originalPoints.map((point) => ({
      x: point.x + deltaX,
      y: point.y + deltaY,
    }));

    setEditablePoints(newPoints);
  };

  const handleStageMouseUp = () => {
    if (isDraggingRegion) {
      setIsDraggingRegion(false);
      setDragStartPos({ x: 0, y: 0 });
      setOriginalPoints([]);

      // Reset cursor
      const stage = stageRef.current;
      if (stage) {
        stage.container().style.cursor = "default";
      }
    }
  };

  const handleRegionHover = (region: Region, isEntering: boolean) => {
    if (isEntering) {
      setHoveredRegion(region.id);
      setHoverLabelText(region.name);
      setShowHoverLabel(true);
    } else {
      setHoveredRegion(null);
      setShowHoverLabel(false);
      setHoverLabelText("");
    }
  };

  const handleSaveDirection = () => {
    if (
      sourceRegionId &&
      destinationRegionId &&
      sourceRegionId !== destinationRegionId
    ) {
      const alreadyExists = connections.some(
        (c) =>
          c.sourceId === sourceRegionId &&
          c.destinationId === destinationRegionId
      );

      if (!alreadyExists) {
        setConnections([
          ...connections,
          {
            id: uuidv4(),
            sourceId: sourceRegionId,
            destinationId: destinationRegionId,
          },
        ]);
      }

      setSourceRegionId(null);
      setDestinationRegionId(null);
    }
  };

  return (
    <Paper 
      withBorder 
      p="md" 
      radius="md" 
      style={{
        backgroundColor: colorScheme === 'dark' ? getThemeColor("gray.9") : "white"
      }}
    >
      <Stack gap="md">
        <Group justify="space-between">
          <Title order={3}>{t("recipes:creation.regionSetup.title")}</Title>
        </Group>

        <Text c={colorScheme === 'dark' ? "gray.4" : "dimmed"} size="sm">
          {t("recipes:creation.regionSetup.description")}
        </Text>

        {/* Road Type Selector */}
        <Card
          withBorder
          p="md"
          radius="md"
          style={{
            backgroundColor: colorScheme === 'dark' ? getThemeColor("gray.9") : getThemeColor("backgrounds.cardLight"),
            borderColor: colorScheme === 'dark' ? getThemeColor("gray.7") : undefined
          }}
        >
          <Stack gap="sm">
            <Group justify="space-between" align="center">
              <Text size="sm" fw={600} c={colorScheme === 'dark' ? getThemeColor(`${mantineTheme.primaryColor}.3`) : mantineTheme.primaryColor}>
                {t(
                  "recipes:creation.regionSetup.selectRoadType",
                  "Select Road Type"
                )}
              </Text>
              <Text size="xs" c={colorScheme === 'dark' ? "gray.4" : "dimmed"}>
                All regions will use this road type
              </Text>
            </Group>

            <SimpleGrid cols={3} spacing="md">
              {roadTypeOptions.map((option) => (
                <UnstyledButton
                  key={option.value}
                  p="md"
                  style={{
                    border: `2px solid ${
                      roadType === option.value 
                        ? getThemeColor(`${mantineTheme.primaryColor}.5`) 
                        : getThemeColor("ui.border")
                    }`,
                    borderRadius: getThemeColor("ui.borderRadius"),
                    backgroundColor:
                      roadType === option.value
                        ? colorScheme === 'dark' 
                          ? `${getThemeColor(`${mantineTheme.primaryColor}.8`)}40` 
                          : `${getThemeColor(`${mantineTheme.primaryColor}.5`)}15`
                        : colorScheme === 'dark' ? getThemeColor("gray.8") : "white",
                    transition: "all 0.2s ease",
                    transform:
                      roadType === option.value ? "scale(1.02)" : "scale(1)",
                    boxShadow:
                      roadType === option.value
                        ? `0 4px 12px ${getThemeColor(`${mantineTheme.primaryColor}.5`)}25`
                        : `0 2px 4px ${getThemeColor("ui.shadow")}`,
                  }}
                  onClick={() => handleRoadTypeChange(option.value)}
                >
                  <Center>
                    <Stack gap="sm" align="center">
                      <Box
                        style={{
                          color:
                            roadType === option.value 
                              ? getThemeColor(`${mantineTheme.primaryColor}.5`) 
                              : getThemeColor("gray.5"),
                          fontSize: "28px",
                        }}
                      >
                        <RoadTypeIcon type={option.value} size={160} />
                      </Box>
                    </Stack>
                  </Center>
                </UnstyledButton>
              ))}
            </SimpleGrid>
          </Stack>
        </Card>

        <SimpleGrid cols={2} breakpoints={[{ maxWidth: 'md', cols: 1 }]} spacing="md">
          {/* Video Canvas */}
          <Box style={{ position: "relative" }}>
            <Box>
              <Stage
                ref={stageRef}
                width={videoSize.width}
                height={videoSize.height}
                onClick={handleStageClick}
                onMouseMove={handleStageMouseMoveForDrag}
                onMouseUp={handleStageMouseUp}
                style={{
                  width: "100%",
                  height: "100%",
                  backgroundColor: colorScheme === 'dark' ? getThemeColor("gray.9") : getThemeColor("gray.0"),
                  borderRadius: getThemeColor("ui.borderRadius"),
                  border: `2px solid ${colorScheme === 'dark' ? getThemeColor("gray.7") : getThemeColor("gray.2")}`,
                }}
              >
                <Layer>
                  {frameImage ? (
                    <KonvaImage
                      image={frameImage}
                      width={videoSize.width}
                      height={videoSize.height}
                      x={0}
                      y={0}
                    />
                  ) : (
                    <Rect
                      width={videoSize.width}
                      height={videoSize.height}
                      fill={colorScheme === 'dark' ? getThemeColor("gray.9") : getThemeColor("gray.0")}
                    />
                  )}

                  {/* Draw existing regions */}
                  {regions.map((region, index) => {
                    const isHighlighted = hoveredRegion === region.id;
                    const regionColor = getRegionColor(region.id);
                    const isBeingEdited =
                      editingRegion === region.id && isEditMode;

                    return (
                      <React.Fragment key={region.id}>
                        <Line
                          points={region.points.flatMap((p) => [p.x, p.y])}
                          closed={true}
                          fill={regionColor + (isHighlighted ? "30" : "20")}
                          stroke={regionColor}
                          strokeWidth={isHighlighted ? 3 : 2}
                          onMouseEnter={() => handleRegionHover(region, true)}
                          onMouseLeave={() => handleRegionHover(region, false)}
                          visible={!isBeingEdited}
                        />
                      </React.Fragment>
                    );
                  })}

                  {/* Draw editable region in edit mode */}
                  {isEditMode && editingRegion && (
                    <>
                      <Line
                        points={editablePoints.flatMap((p) => [p.x, p.y])}
                        closed={true}
                        fill={getRegionColor(editingRegion) + "30"}
                        stroke={getRegionColor(editingRegion)}
                        strokeWidth={2}
                        strokeDasharray={[5, 5]}
                        onMouseDown={handleRegionMouseDown}
                        onMouseEnter={(e) => {
                          const stage = e.target.getStage();
                          if (stage && !isDraggingRegion) {
                            stage.container().style.cursor = "grab";
                          }
                        }}
                        onMouseLeave={(e) => {
                          const stage = e.target.getStage();
                          if (stage && !isDraggingRegion) {
                            stage.container().style.cursor = "default";
                          }
                        }}
                      />

                      {/* Editable points */}
                      {editablePoints.map((point, i) => (
                        <Circle
                          key={`edit-point-${i}`}
                          x={point.x}
                          y={point.y}
                          radius={6}
                          fill={colorScheme === 'dark' ? getThemeColor("gray.4") : "white"}
                          stroke={getRegionColor(editingRegion)}
                          strokeWidth={2}
                          draggable
                          onDragMove={(e) => {
                            handlePointDrag(i, {
                              x: e.target.x(),
                              y: e.target.y(),
                            });
                          }}
                          onMouseEnter={(e) => {
                            const stage = e.target.getStage();
                            if (stage) {
                              stage.container().style.cursor = "crosshair";
                            }
                          }}
                          onMouseLeave={(e) => {
                            const stage = e.target.getStage();
                            if (stage) {
                              stage.container().style.cursor = "default";
                            }
                          }}
                        />
                      ))}
                    </>
                  )}

                  {/* Draw current region being created */}
                  {currentPoints.length > 0 && !isEditMode && (
                    <Line
                      points={currentPoints.flatMap((p) => [p.x, p.y])}
                      closed={currentPoints.length > 2}
                      fill={getRegionColor("new-region") + "25"}
                      stroke={getRegionColor("new-region")}
                      strokeWidth={2}
                      strokeDasharray={[8, 4]}
                    />
                  )}

                  {/* Draw points for current region */}
                  {currentPoints.map((point, i) => (
                    <Circle
                      key={i}
                      x={point.x}
                      y={point.y}
                      radius={4}
                      fill={colorScheme === 'dark' ? getThemeColor("gray.4") : "white"}
                      stroke={getRegionColor("new-region")}
                      strokeWidth={2}
                    />
                  ))}
                </Layer>
              </Stage>
            </Box>

            {/* Hover label */}
            {showHoverLabel && (
              <Box
                style={{
                  position: "absolute",
                  left: mousePos.x + 10,
                  top: mousePos.y - 10,
                  backgroundColor: colorScheme === 'dark' ? getThemeColor("gray.9") + "cc" : getThemeColor("gray.7") + "cc", // cc = 80% opacity
                  color: "white",
                  padding: "4px 8px",
                  borderRadius: getThemeColor("ui.borderRadius"),
                  fontSize: "12px",
                  fontWeight: 500,
                  pointerEvents: "none",
                  zIndex: 1000,
                  whiteSpace: "nowrap",
                }}
              >
                {hoverLabelText}
              </Box>
            )}

            {isDrawing && !isEditMode && (
              <Alert color={mantineTheme.primaryColor} mt="sm" radius="md" variant={colorScheme === 'dark' ? "filled" : "light"} styles={{ root: { opacity: colorScheme === 'dark' ? 0.8 : 1 } }}>
                <Text size="sm">
                  {t(
                    "recipes:creation.regionSetup.drawInstructions",
                    "Click on the canvas to add points. You need at least 3 points to create a region."
                  )}
                </Text>
              </Alert>
            )}

            {isEditMode && (
              <Alert color="yellow" mt="sm" radius="md" variant={colorScheme === 'dark' ? "filled" : "light"} styles={{ root: { opacity: colorScheme === 'dark' ? 0.8 : 1 } }}>
                <Text size="sm">
                  Drag the region outline to move the entire region, or drag the
                  circular handles to adjust individual points.
                </Text>
              </Alert>
            )}
          </Box>

          {/* Controls */}
          <Card 
            withBorder 
            p="md" 
            radius="md" 
            style={{
              backgroundColor: colorScheme === 'dark' ? getThemeColor("gray.9") : "white",
              borderColor: colorScheme === 'dark' ? getThemeColor("gray.7") : getThemeColor("gray.3"),
              height: '100%'
            }}
          >
              <Group>
                {!isDrawing && !isEditMode && (
                  <Button
                    leftSection={<IconPlus size={16} />}
                    disabled={isDrawing}
                    onClick={handleAddRegion}
                    color={mantineTheme.primaryColor}
                    variant="filled"
                  >
                    {t("recipes:creation.regionSetup.addRegion", "Add Region")}
                  </Button>
                )}

                {isDrawing && !isEditMode && (
                  <>
                    <Button
                      variant="outline"
                      color="red"
                      onClick={handleCancelEdit}
                      leftSection={<IconX size={16} />}
                    >
                      {t("common:button.cancel", "Cancel")}
                    </Button>

                    <Button
                      disabled={currentPoints.length < 3}
                      onClick={handleSaveRegion}
                      color={mantineTheme.primaryColor}
                      leftSection={<IconCheck size={16} />}
                    >
                      {t("common:button.save", "Save")}
                    </Button>
                  </>
                )}

                {isEditMode && (
                  <>
                    <Button
                      variant="outline"
                      color="red"
                      onClick={handleCancelEdit}
                      leftSection={<IconX size={16} />}
                    >
                      Cancel Edit
                    </Button>

                    <Button
                      onClick={handleSaveEdit}
                      color={mantineTheme.primaryColor}
                      leftSection={<IconCheck size={16} />}
                      style={{
                        background: `linear-gradient(135deg, ${getThemeColor(`${mantineTheme.primaryColor}.5`)} 0%, ${getThemeColor(`${mantineTheme.primaryColor}.6`)} 100%)`,
                        border: "none",
                      }}
                    >
                      Save Changes
                    </Button>
                  </>
                )}
              </Group>

              {(isDrawing || isEditMode) && (
                <TextInput
                  label={t(
                    "recipes:creation.regionSetup.regionName",
                    "Region Name"
                  )}
                  value={regionName}
                  onChange={(e) => setRegionName(e.currentTarget.value)}
                  placeholder={`Region ${regions.length + 1}`}
                  radius="md"
                />
              )}

              {/* Region List */}
              {!isDrawing && !isEditMode && (
                <Card
                  withBorder
                  p="md"
                  radius="md"
                  style={{
                    backgroundColor: colorScheme === 'dark' ? getThemeColor("gray.9") : getThemeColor("backgrounds.cardLight"),
                    borderColor: colorScheme === 'dark' ? getThemeColor("gray.7") : undefined,
                  }}
                >
                  <Text size="sm" fw={500} mb="sm" c={colorScheme === 'dark' ? getThemeColor(`${mantineTheme.primaryColor}.3`) : mantineTheme.primaryColor}>
                    Created Regions ({regions.length})
                  </Text>
                  <SimpleGrid cols={regions.length > 8 ? 2 : 1} spacing="xs">
                    {regions.length === 0 ? (
                      <Center py="md" style={{ gridColumn: 'span 2' }}>
                        <Stack align="center" spacing="xs">
                          <Box 
                            style={{
                              width: 50,
                              height: 50,
                              borderRadius: '50%',
                              backgroundColor: colorScheme === 'dark' ? getThemeColor("gray.8") : getThemeColor("gray.1"),
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              opacity: 0.7
                            }}
                          >
                            <IconPlus size={24} color={colorScheme === 'dark' ? getThemeColor("gray.5") : getThemeColor("gray.5")} />
                          </Box>
                          <Text size="sm" c={colorScheme === 'dark' ? "gray.5" : "gray.6"} fw={500}>
                            No regions defined yet
                          </Text>
                          <Text size="xs" c={colorScheme === 'dark' ? "gray.6" : "gray.5"} align="center">
                            Click the "Add Region" button to start creating regions
                          </Text>
                        </Stack>
                      </Center>
                    ) : (
                      regions.map((region, index) => {
                      const hasConnections = connections.some(
                        (conn) =>
                          conn.sourceId === region.id ||
                          conn.destinationId === region.id
                      );

                      return (
                        <Group
                          key={region.id}
                          justify="space-between"
                          p={regions.length > 8 ? "xs" : "sm"}
                          style={{
                            backgroundColor: colorScheme === 'dark' ? getThemeColor("gray.8") : "white",
                            borderRadius: getThemeColor("ui.borderRadius"),
                            border: `1px solid ${colorScheme === 'dark' ? getRegionColor(region.id) + '70' : getRegionColor(region.id) + '40'}`,
                            boxShadow: colorScheme === 'dark' ? `0 1px 5px ${getThemeColor("ui.shadow")}80` : `0 1px 3px ${getThemeColor("ui.shadow")}`,
                          }}
                        >
                          <Group gap="sm">
                            <Box
                              style={{
                                width: connections.length > 8 ? "10px" : "12px",
                                height: connections.length > 8 ? "10px" : "12px",
                                borderRadius: "50%",
                                backgroundColor: getRegionColor(region.id),
                              }}
                            />
                            <Text size={regions.length > 8 ? "xs" : "sm"} fw={500}>
                              {region.name}
                            </Text>
                            {hasConnections && (
                              <Text size="xs" c={colorScheme === 'dark' ? "yellow.4" : "yellow.7"} fw={500}>
                                • Connected
                              </Text>
                            )}
                          </Group>
                          <Group gap="xs">
                            <ActionIcon
                              variant="light"
                              color={theme.primaryColor}
                              size="sm"
                              onClick={() => handleEditRegion(region)}
                              title="Edit region"
                            >
                              <IconEdit size={14} />
                            </ActionIcon>
                            <ActionIcon
                              variant="light"
                              color="red"
                              size="sm"
                              onClick={() => handleDeleteRegion(region.id)}
                              title={
                                hasConnections
                                  ? "Remove connections first"
                                  : "Delete region"
                              }
                            >
                              <IconTrash size={14} />
                            </ActionIcon>
                          </Group>
                        </Group>
                      );
                    }))}
                  </SimpleGrid>
              {!isDrawing && !isEditMode && (
                <Box mt="md">
                  <Tabs defaultValue="regions">
                    <Tabs.List>
                      <Tabs.Tab 
                        value="regions" 
                        leftSection={<Box style={{ width: 6, height: 6, borderRadius: '50%', backgroundColor: getThemeColor(`${mantineTheme.primaryColor}.5`) }} />}
                      >
                        Regions ({regions.length})
                      </Tabs.Tab>
                      <Tabs.Tab 
                        value="connections" 
                        leftSection={<Box style={{ width: 6, height: 6, borderRadius: '50%', backgroundColor: getThemeColor(`${mantineTheme.primaryColor}.5`) }} />}
                      >
                        Connections ({connections.length})
                      </Tabs.Tab>
                    </Tabs.List>

                    <Tabs.Panel value="regions" pt="xs">
                      {regions.length === 0 ? (
                        <Center p="md">
                          <Stack align="center" spacing="xs">
                            <IconPlus 
                              size={40} 
                              opacity={0.5} 
                              color={colorScheme === 'dark' ? getThemeColor("gray.6") : getThemeColor("gray.5")}
                              style={{ padding: 8 }}
                            />
                            <Text size="sm" c={colorScheme === 'dark' ? "gray.5" : "gray.6"} fw={500}>
                              No regions defined yet
                            </Text>
                            <Text size="xs" c={colorScheme === 'dark' ? "gray.6" : "gray.5"} align="center">
                              Click the "Add Region" button to start creating regions
                            </Text>
                          </Stack>
                        </Center>
                      ) : (
                        <ScrollArea h={200} offsetScrollbars>
                          <Stack spacing="xs">
                            {regions.map((region) => {
                              const hasConnections = connections.some(
                                conn => conn.sourceId === region.id || conn.destinationId === region.id
                              );
                              
                              return (
                                <Group 
                                  key={region.id} 
                                  position="apart"
                                  p="xs"
                                  style={{
                                    backgroundColor: colorScheme === 'dark' ? 
                                      getThemeColor("gray.8") : 
                                      getThemeColor("gray.0"),
                                    borderRadius: getThemeColor("ui.borderRadius"),
                                    borderLeft: `3px solid ${getRegionColor(region.id)}`,
                                  }}
                                >
                                  <Group spacing="xs">
                                    <Box
                                      style={{
                                        width: 12,
                                        height: 12,
                                        borderRadius: "50%",
                                        backgroundColor: getRegionColor(region.id),
                                        border: `1px solid ${colorScheme === 'dark' ? getThemeColor("gray.7") : getThemeColor("gray.3")}`,
                                      }}
                                    />
                                    <Box>
                                      <Text size="sm" fw={500}>{region.name}</Text>
                                      {hasConnections && (
                                        <Text size="xs" c={colorScheme === 'dark' ? "gray.5" : "gray.6"}>
                                          Connected
                                        </Text>
                                      )}
                                    </Box>
                                  </Group>
                                  
                                  <Group spacing={4}>
                                    <ActionIcon
                                      size="sm"
                                      variant="subtle"
                                      color={mantineTheme.primaryColor}
                                      onClick={() => handleEditRegion(region)}
                                    >
                                      <IconEdit size={14} />
                                    </ActionIcon>
                                    <ActionIcon
                                      size="sm"
                                      variant="subtle"
                                      color="red"
                                      onClick={() => handleDeleteRegion(region.id)}
                                    >
                                      <IconTrash size={14} />
                                    </ActionIcon>
                                  </Group>
                                </Group>
                              );
                            })}
                          </Stack>
                        </ScrollArea>
                      )}
                    </Tabs.Panel>

                    <Tabs.Panel value="connections" pt="xs">
                      {regions.length < 2 ? (
                        <Center py="md">
                          <Stack align="center" spacing="xs">
                            <Text size="sm" fw={500} c={colorScheme === 'dark' ? "gray.5" : "gray.6"}>
                              Need at least 2 regions
                            </Text>
                            <Text size="xs" c={colorScheme === 'dark' ? "gray.6" : "gray.5"} align="center">
                              Create more regions to define connections
                            </Text>
                          </Stack>
                        </Center>
                      ) : (
                        <Stack spacing="xs">
                          {/* Connection creator */}
                          <Card 
                            withBorder 
                            p="xs" 
                            radius="sm" 
                            style={{
                              backgroundColor: colorScheme === 'dark' ? getThemeColor("gray.8") : getThemeColor("gray.0"),
                            }}
                          >
                            <Group spacing={8} noWrap>
                              <Select
                                placeholder="From"
                                size="xs"
                                value={sourceRegionId}
                                onChange={setSourceRegionId}
                                data={regions.map((r) => ({
                                  value: r.id, 
                                  label: r.name,
                                  leftSection: (
                                    <Box
                                      style={{
                                        width: 10,
                                        height: 10,
                                        borderRadius: '50%',
                                        backgroundColor: getRegionColor(r.id),
                                        border: `1px solid ${colorScheme === 'dark' ? getThemeColor("gray.7") : getThemeColor("gray.3")}`,
                                      }}
                                    />
                                  ),
                                }))}
                                searchable
                                styles={{
                                  root: { flex: 1 },
                                  input: {
                                    fontSize: '12px',
                                    '&:focus': {
                                      borderColor: getThemeColor(`${mantineTheme.primaryColor}.5`)
                                    },
                                    backgroundColor: colorScheme === 'dark' ? getThemeColor("gray.8") : "white"
                                  }
                                }}
                              />

                              <Center style={{ width: 30 }}>
                                <IconArrowRight size={14} color={colorScheme === 'dark' ? getThemeColor("gray.6") : getThemeColor("gray.5")} />
                              </Center>
                              
                              <Select
                                placeholder={sourceRegionId ? "To" : "Select source first"}
                                size="xs"
                                value={destinationRegionId}
                                onChange={setDestinationRegionId}
                                data={regions
                                  .filter((r) => r.id !== sourceRegionId)
                                  .map((r) => ({
                                    value: r.id, 
                                    label: r.name,
                                    leftSection: (
                                      <Box
                                        style={{
                                          width: 10,
                                          height: 10,
                                          borderRadius: '50%',
                                          backgroundColor: getRegionColor(r.id),
                                          border: `1px solid ${colorScheme === 'dark' ? getThemeColor("gray.7") : getThemeColor("gray.3")}`,
                                        }}
                                      />
                                    ),
                                  }))}
                                searchable
                                disabled={!sourceRegionId}
                                styles={{
                                  root: { flex: 1 },
                                  input: {
                                    fontSize: '12px',
                                    '&:focus': {
                                      borderColor: getThemeColor(`${mantineTheme.primaryColor}.5`)
                                    },
                                    backgroundColor: colorScheme === 'dark' ? 
                                      !sourceRegionId ? getThemeColor("gray.9") : getThemeColor("gray.8") : 
                                      !sourceRegionId ? getThemeColor("gray.1") : "white"
                                  }
                                }}
                              />
                              
                              <Button 
                                size="xs"
                                variant="light"
                                color={mantineTheme.primaryColor}
                                disabled={!sourceRegionId || !destinationRegionId}
                                onClick={handleSaveDirection}
                              >
                                Add
                              </Button>
                            </Group>
                          </Card>
                          
                          {/* Connections list */}
                          <ScrollArea h={140} offsetScrollbars>
                            {connections.length === 0 ? (
                              <Center py="md">
                                <Text size="xs" c={colorScheme === 'dark' ? "gray.6" : "gray.5"}>
                                  No connections defined yet
                                </Text>
                              </Center>
                            ) : (
                              <SimpleGrid cols={connections.length > 8 ? 2 : 1} spacing="xs">
                                {connections.map((conn) => {
                                  const source = regions.find((r) => r.id === conn.sourceId);
                                  const dest = regions.find((r) => r.id === conn.destinationId);
                                  
                                  return (
                                    <Group 
                                      key={conn.id} 
                                      position="apart"
                                      px="xs"
                                      py="xs"
                                      style={{
                                        backgroundColor: colorScheme === 'dark' ? 
                                          getThemeColor("gray.8") : 
                                          getThemeColor("gray.0"),
                                        borderRadius: getThemeColor("ui.borderRadius"),
                                        border: `1px solid ${colorScheme === 'dark' ? getThemeColor("gray.7") : getThemeColor("gray.3")}`,
                                      }}
                                      onMouseEnter={() => setHoveredConnection(conn.id)}
                                      onMouseLeave={() => setHoveredConnection(null)}
                                    >
                                      <Group spacing={6} noWrap>
                                        <Box
                                          style={{
                                            width: 10,
                                            height: 10,
                                            borderRadius: '50%',
                                            backgroundColor: getRegionColor(conn.sourceId),
                                            border: `1px solid ${colorScheme === 'dark' ? getThemeColor("gray.7") : getThemeColor("gray.3")}`,
                                          }}
                                        />
                                        <Text size="xs" fw={500}>{source?.name}</Text>
                                        <IconArrowRight 
                                          size={12} 
                                          style={{ 
                                            color: colorScheme === 'dark' ? 
                                              getThemeColor(`${mantineTheme.primaryColor}.4`) : 
                                              getThemeColor(`${mantineTheme.primaryColor}.5`) 
                                          }}
                                        />
                                        <Box
                                          style={{
                                            width: 10,
                                            height: 10,
                                            borderRadius: '50%',
                                            backgroundColor: getRegionColor(conn.destinationId),
                                            border: `1px solid ${colorScheme === 'dark' ? getThemeColor("gray.7") : getThemeColor("gray.3")}`,
                                          }}
                                        />
                                        <Text size="xs" fw={500}>{dest?.name}</Text>
                                      </Group>
                                      
                                      <ActionIcon
                                        size="xs"
                                        variant="subtle"
                                        color="red"
                                        onClick={() => setConnections((prev) => 
                                          prev.filter((c) => c.id !== conn.id)
                                        )}
                                      >
                                        <IconTrash size={12} />
                                      </ActionIcon>
                                    </Group>
                                  );
                                })}
                              </SimpleGrid>
                            )}
                          </ScrollArea>
                        </Stack>
                      )}
                    </Tabs.Panel>
                  </Tabs>
                </Box>
              )}
          </Card>
        </SimpleGrid>
                          size={40} 
                          opacity={0.5} 
                          color={colorScheme === 'dark' ? getThemeColor("gray.6") : getThemeColor("gray.5")}
                          style={{ padding: 8 }}
                        />
                        <Text size="sm" fw={500} c={colorScheme === 'dark' ? "gray.5" : "gray.6"}>
                          No regions defined yet
                        </Text>
                        <Text size="xs" c={colorScheme === 'dark' ? "gray.6" : "gray.5"} align="center">
                          Click the "Add" button to create regions
                        </Text>
                      </Stack>
                    </Center>
                  ) : (
                    <Stack spacing="xs">
                      {regions.map((region) => {
                        const hasConnections = connections.some(
                          conn => conn.sourceId === region.id || conn.destinationId === region.id
                        );
                        
                        return (
                          <Group 
                            key={region.id} 
                            position="apart"
                            p="xs"
                            style={{
                              backgroundColor: colorScheme === 'dark' ? 
                                getThemeColor("gray.8") + '80' : 
                                getThemeColor("gray.0"),
                              borderRadius: getThemeColor("ui.borderRadius"),
                              borderLeft: `3px solid ${getRegionColor(region.id)}`,
                            }}
                          >
                            <Group spacing="xs">
                              <Box
                                style={{
                                  width: 12,
                                  height: 12,
                                  borderRadius: "50%",
                                  backgroundColor: getRegionColor(region.id),
                                  border: `1px solid ${colorScheme === 'dark' ? getThemeColor("gray.7") : getThemeColor("gray.3")}`,
                                }}
                              />
                              <Box>
                                <Text size="sm" fw={500}>{region.name}</Text>
                                {hasConnections && (
                                  <Text size="xs" c={colorScheme === 'dark' ? "gray.5" : "gray.6"}>
                                    Connected
                                  </Text>
                                )}
                              </Box>
                            </Group>
                            
                            <Group spacing={4}>
                              <ActionIcon
                                size="sm"
                                variant="subtle"
                                color={mantineTheme.primaryColor}
                                onClick={() => handleEditRegion(region)}
                              >
                                <IconEdit size={14} />
                              </ActionIcon>
                              <ActionIcon
                                size="sm"
                                variant="subtle"
                                color="red"
                                onClick={() => handleDeleteRegion(region.id)}
                              >
                                <IconTrash size={14} />
                              </ActionIcon>
                            </Group>
                          </Group>
                        );
                      })}
                    </Stack>
                  )}
                </ScrollArea>
              </Card>

              {/* Connections Management */}
              <Card 
                withBorder 
                p="md" 
                radius="md" 
                style={{
                  backgroundColor: colorScheme === 'dark' ? getThemeColor("gray.9") : "white",
                  height: '100%'
                }}
              >
                <Group position="apart" mb="sm">
                  <Box>
                    <Text fw={600} size="sm" c={colorScheme === 'dark' ? getThemeColor(`${mantineTheme.primaryColor}.3`) : mantineTheme.primaryColor}>
                      Connections ({connections.length})
                    </Text>
                    <Text size="xs" c={colorScheme === 'dark' ? "gray.5" : "gray.6"}>
                      Region traffic flow paths
                    </Text>
                  </Box>
                </Group>

                {regions.length < 2 ? (
                  <Center py="md">
                    <Stack align="center" spacing="xs">
                      <Text size="sm" fw={500} c={colorScheme === 'dark' ? "gray.5" : "gray.6"}>
                        Need at least 2 regions
                      </Text>
                      <Text size="xs" c={colorScheme === 'dark' ? "gray.6" : "gray.5"} align="center">
                        Create more regions to define connections
                      </Text>
                    </Stack>
                  </Center>
                ) : (
                  <Stack spacing="xs">
                    {/* Connection form */}
                    <Card 
                      withBorder 
                      p="xs" 
                      radius="sm" 
                      style={{
                        backgroundColor: colorScheme === 'dark' ? getThemeColor("gray.8") : getThemeColor("gray.0"),
                      }}
                    >
                      <Group spacing={8} noWrap>
                        <Select
                          placeholder="From"
                          size="xs"
                          value={sourceRegionId}
                          onChange={setSourceRegionId}
                          data={regions.map((r) => ({
                            value: r.id, 
                            label: r.name,
                            leftSection: (
                              <Box
                                style={{
                                  width: 10,
                                  height: 10,
                                  borderRadius: '50%',
                                  backgroundColor: getRegionColor(r.id),
                                  border: `1px solid ${colorScheme === 'dark' ? getThemeColor("gray.7") : getThemeColor("gray.3")}`,
                                }}
                              />
                            ),
                          }))}
                          searchable
                          styles={{
                            root: { flex: 1 },
                            input: {
                              fontSize: '12px',
                              '&:focus': {
                                borderColor: getThemeColor(`${mantineTheme.primaryColor}.5`)
                              }
                            }
                          }}
                        />

                        <Center style={{ width: 30 }}>
                          <IconArrowRight size={14} color={colorScheme === 'dark' ? getThemeColor("gray.6") : getThemeColor("gray.5")} />
                        </Center>
                        
                        <Select
                          placeholder={sourceRegionId ? "To" : "Select source first"}
                          size="xs"
                          value={destinationRegionId}
                          onChange={setDestinationRegionId}
                          data={regions
                            .filter((r) => r.id !== sourceRegionId)
                            .map((r) => ({
                              value: r.id, 
                              label: r.name,
                              leftSection: (
                                <Box
                                  style={{
                                    width: 10,
                                    height: 10,
                                    borderRadius: '50%',
                                    backgroundColor: getRegionColor(r.id),
                                    border: `1px solid ${colorScheme === 'dark' ? getThemeColor("gray.7") : getThemeColor("gray.3")}`,
                                  }}
                                />
                              ),
                            }))}
                          searchable
                          disabled={!sourceRegionId}
                          styles={{
                            root: { flex: 1 },
                            input: {
                              fontSize: '12px',
                              '&:focus': {
                                borderColor: getThemeColor(`${mantineTheme.primaryColor}.5`)
                              }
                            }
                          }}
                        />
                        
                        <Button 
                          size="xs"
                          variant="light"
                          color={mantineTheme.primaryColor}
                          disabled={!sourceRegionId || !destinationRegionId}
                          onClick={handleSaveDirection}
                        >
                          Add
                        </Button>
                      </Group>
                    </Card>
                    
                    {/* Connections list */}
                    <ScrollArea h={160} offsetScrollbars>
                      {connections.length === 0 ? (
                        <Center py="md">
                          <Stack align="center" spacing="xs">
                            <Text size="sm" fw={500} c={colorScheme === 'dark' ? "gray.5" : "gray.6"}>
                              No connections defined
                            </Text>
                            <Text size="xs" c={colorScheme === 'dark' ? "gray.6" : "gray.5"} align="center">
                              Use the form above to create connections
                            </Text>
                          </Stack>
                        </Center>
                      ) : (
                        <SimpleGrid cols={connections.length > 8 ? 2 : 1} spacing="xs">
                          {connections.map((conn) => {
                            const source = regions.find((r) => r.id === conn.sourceId);
                            const dest = regions.find((r) => r.id === conn.destinationId);
                            
                            return (
                              <Group 
                                key={conn.id} 
                                position="apart"
                                px="xs"
                                py="xs"
                                style={{
                                  backgroundColor: colorScheme === 'dark' ? 
                                    getThemeColor("gray.8") + '80' : 
                                    getThemeColor("gray.0"),
                                  borderRadius: getThemeColor("ui.borderRadius"),
                                  border: `1px solid ${colorScheme === 'dark' ? getThemeColor("gray.7") : getThemeColor("gray.2")}`,
                                }}
                                onMouseEnter={() => setHoveredConnection(conn.id)}
                                onMouseLeave={() => setHoveredConnection(null)}
                              >
                                <Group spacing={6} noWrap>
                                  <Box
                                    style={{
                                      width: 10,
                                      height: 10,
                                      borderRadius: '50%',
                                      backgroundColor: getRegionColor(conn.sourceId),
                                      border: `1px solid ${colorScheme === 'dark' ? getThemeColor("gray.7") : getThemeColor("gray.3")}`,
                                    }}
                                  />
                                  <Text size="xs" fw={500}>{source?.name}</Text>
                                  <IconArrowRight 
                                    size={12} 
                                    style={{ 
                                      color: colorScheme === 'dark' ? 
                                        getThemeColor(`${mantineTheme.primaryColor}.4`) : 
                                        getThemeColor(`${mantineTheme.primaryColor}.5`) 
                                    }}
                                  />
                                  <Box
                                    style={{
                                      width: 10,
                                      height: 10,
                                      borderRadius: '50%',
                                      backgroundColor: getRegionColor(conn.destinationId),
                                      border: `1px solid ${colorScheme === 'dark' ? getThemeColor("gray.7") : getThemeColor("gray.3")}`,
                                    }}
                                  />
                                  <Text size="xs" fw={500}>{dest?.name}</Text>
                                </Group>
                                
                                <ActionIcon
                                  size="xs"
                                  variant={hoveredConnection === conn.id ? "filled" : "subtle"}
                                  color="red"
                                  onClick={() => setConnections((prev) => 
                                    prev.filter((c) => c.id !== conn.id)
                                  )}
                                >
                                  <IconTrash size={12} />
                                </ActionIcon>
                              </Group>
                            );
                          })}
                        </SimpleGrid>
                      )}
                    </ScrollArea>
                  </Stack>
                )}
              </Card>
            </SimpleGrid>
          </Paper>
        )}
      </Stack>

      {/* Region Deletion Confirmation Modal */}
      <Modal
        opened={showDeleteModal}
        onClose={cancelDeleteRegion}
        title="Delete Region"
        centered
        radius="md"
        overlayProps={{
          backgroundOpacity: colorScheme === 'dark' ? 0.85 : 0.65,
        }}
        styles={{
          content: {
            background: colorScheme === 'dark' ? getThemeColor("gray.9") : 'white',
          },
        }}
      >
        <Stack gap="md">
          <Group gap="sm">
            <IconAlertTriangle size={20} color={colorScheme === 'dark' ? getThemeColor("yellow.4") : getThemeColor("yellow.8")} />
            <Text fw={500}>Region has active connections</Text>
          </Group>

          <Text size="sm" c={colorScheme === 'dark' ? "gray.4" : "dimmed"}>
            The region "<strong>{regionToDelete?.name}</strong>" has{" "}
            {regionToDelete?.connections.length} connection(s). Deleting this
            region will also remove all its connections.
          </Text>

          {regionToDelete && regionToDelete.connections.length > 0 && (
            <Box
              p="sm"
              style={{
                backgroundColor: colorScheme === 'dark' ? getThemeColor("gray.8") : getThemeColor("red.0"),
                borderRadius: getThemeColor("ui.borderRadius"),
                border: `1px solid ${colorScheme === 'dark' ? getThemeColor("red.9") : getThemeColor("red.2")}`,
              }}
            >
              <Text size="xs" fw={500} c="red" mb="xs">
                Connections to be removed:
              </Text>
              <Stack gap="xs">
                {regionToDelete.connections.map((conn) => {
                  const source = regions.find((r) => r.id === conn.sourceId);
                  const dest = regions.find((r) => r.id === conn.destinationId);
                  return (
                    <Text key={conn.id} size="xs" c={colorScheme === 'dark' ? "gray.4" : "dimmed"}>
                      • {source?.name} → {dest?.name}
                    </Text>
                  );
                })}
              </Stack>
            </Box>
          )}

          <Group justify="flex-end" mt="md">
            <Button variant="outline" onClick={cancelDeleteRegion}>
              Cancel
            </Button>
            <Button color="red" onClick={confirmDeleteRegion}>
              Delete Region & Connections
            </Button>
          </Group>
        </Stack>
      </Modal>

      {/* Road Type Change Confirmation Modal */}
      <Modal
        opened={showRoadTypeModal}
        onClose={cancelRoadTypeChange}
        title="Change Road Type"
        centered
        radius="md"
        overlayProps={{
          backgroundOpacity: colorScheme === 'dark' ? 0.85 : 0.65,
        }}
        styles={{
          content: {
            background: colorScheme === 'dark' ? getThemeColor("gray.9") : 'white',
          },
        }}
      >
        <Stack gap="md">
          <Group gap="sm">
            <IconAlertTriangle size={20} color={getThemeColor("yellow.7")} />
            <Text fw={500}>This will clear all existing data</Text>
          </Group>

          <Text size="sm" c={colorScheme === 'dark' ? "gray.4" : "dimmed"}>
            Changing the road type will remove all existing regions (
            {regions.length}) and connections ({connections.length}). This
            action cannot be undone.
          </Text>

          <Group justify="flex-end" mt="md">
            <Button variant="outline" onClick={cancelRoadTypeChange}>
              Cancel
            </Button>
            <Button color="red" onClick={confirmRoadTypeChange}>
              Change Road Type
            </Button>
          </Group>
        </Stack>
      </Modal>
    </Paper>
  );
}
